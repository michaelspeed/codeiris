# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MagicLinkDto {
  listener: String!
  status: Boolean!
}

type Mutation {
  sendMagicLink(email: String!): MagicLinkDto!
}

enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  deleted: Boolean!
  id: ID!
  slug: String!
  status: PostStatus!
  title: String!
  type: PostType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  url: String!
  user: User!
  userId: String!
  votes: Vote!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderFeild!
}

enum PostOrderFeild {
  updatedAt
  votes
}

enum PostStatus {
  blocked
  draft
  hidden
  published
}

enum PostType {
  ask
  job
  link
}

type Query {
  getAuth: Auth!
  getPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, skip: Int): PostConnection!
  getUsers(after: String, before: String, first: Int, last: Int, orderBy: UserOrder, skip: Int): UserConnection!
  me: User
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String
  middleName: String
  role: UserRole!
  status: UserStatus!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

enum UserOrderField {
  email
  firstName
  lastName
  middleName
}

enum UserRole {
  admin
  moderator
  user
}

enum UserStatus {
  active
  blocked
  inactive
}

type Vote {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  post: Post!
  type: VoteType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User!
}

enum VoteType {
  downvotes
  upvotes
}
